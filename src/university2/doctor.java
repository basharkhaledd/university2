/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package university2;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static university2.connectdb.connect;

/**
 *
 * @author w
 */
public class doctor extends javax.swing.JFrame {

    /**
     * Creates new form doctor
     */
     Connection con=null;
    PreparedStatement p=null;
    ResultSet res=null;
    int choose;
    public doctor() {
        initComponents();
         choose=mainmenu.chd;
 
        if(choose==2){
        this.setTitle("update doctor");
        add.setText("update");
        name.setEnabled(false);
        address.setEnabled(false);
        phone.setEnabled(false);
        male.setEnabled(false);
        female.setEnabled(false);
        
        }
         if(choose==3){
        this.setTitle("Delete doctor");
        add.setText("Delete");
        name.setEnabled(false);
        address.setEnabled(false);
        phone.setEnabled(false);
        male.setEnabled(false);
        female.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        add = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("add doctor");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("username");

        name.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("doctor name");

        user.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userKeyPressed(evt);
            }
        });

        phone.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("phone");

        address.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("address");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("gender");

        buttonGroup1.add(male);
        male.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        male.setText("Male");

        buttonGroup1.add(female);
        female.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        female.setText("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(male)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(female)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(72, 72, 72))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(user)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(name)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(address))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(female)
                        .addComponent(male)))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(jButton1))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(378, 320));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
           if(choose==1){
               try {
                   insert();
               } catch (SQLException ex) {
                   Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
               }
         }
         else if(choose==2){
          update();
         }
         else{
          delete();
         }
    }//GEN-LAST:event_addActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void userKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userKeyPressed
     if(evt.getKeyCode()==evt.VK_ENTER && choose==2)
       {
         if(user.getText().equals("")){
         JOptionPane.showMessageDialog(null,"There are empty fields");
         }else{
           
             try {
                   con=connect();
                 p=con.prepareStatement("select * from doctor where id='"+Integer.parseInt(user.getText())+"'");
                 res=p.executeQuery();
                 
                 if(res.next()){
                      
                     
                    user.setEnabled(false);
                    
                    name.setText(res.getString(2));
                    name.setEnabled(true);
                    phone.setText(res.getString(4));
                    phone.setEnabled(true);
                    address.setText(res.getString(5));
                    address.setEnabled(true);
                    
                    String gender=res.getString(6);
                    if(gender.equals(female.getText())){
                       female.setSelected(true);
                    }else{
                       male.setSelected(true);
                    }
                      male.setEnabled(true);
                      female.setEnabled(true);
                 }else{
                JOptionPane.showMessageDialog(null, "رقم الدكتور غير موجود");

                 }
             } catch (SQLException ex) {
                 System.out.println(ex.getMessage());
             }finally{
             
                 try {
                     con.close();
                      p.close();
                     res.close();
                 } catch (SQLException ex) {
                     Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
                 }
                
             }
             
         
         }
       
       
       }
    }//GEN-LAST:event_userKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new doctor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField address;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton female;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton male;
    private javax.swing.JTextField name;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables

     private void insert() throws SQLException {
        String gender=male.getText();
      if(female.isSelected()){
      
      gender=female.getText();
      }
        
      if(user.getText().equals("") || name.getText().equals("") ||phone.getText().equals("") ||
             address.getText().equals("")|| male.isSelected() && female.isSelected()){
        JOptionPane.showMessageDialog(null, "There are empty fields");
      }
      else{
            con=connect();
            p=con.prepareStatement("select * from doctor where id='"+Integer.parseInt(user.getText())+"'");
            res=p.executeQuery();
            if(res.next()){
                     JOptionPane.showMessageDialog(null, "رقم الدكتور موجود مسبقا");
            
            }else{
            
            
          con=connect();
          p = con.prepareStatement("insert into doctor values('"+Integer.parseInt(user.getText())+"','"+name.getText()+"','123','"+phone.getText()+"','"+address.getText()+"','"+gender+"')");
            p.execute();
          JOptionPane.showMessageDialog(null,  " done");
          user.setText("");
          name.setText("");
          phone.setText("");
          address.setText("");
          male.isSelected();
          female.isSelected();

            
           
        }  
            }
          con.close();
                 p.close();
            res.close();
            
      
      }
    
   

    private void update() {
        String gender=male.getText();
      if(female.isSelected()){
      gender=female.getText();
      }
      if(name.getText().equals("") ||phone.getText().equals("") || address.getText().equals("")||
              male.isSelected() && female.isSelected()){
        JOptionPane.showMessageDialog(null, "There are empty fields");
      }else{
            con=connect();
            try {
                p=con.prepareStatement("update doctor set name='"+name.getText()+"',phone='"+phone.getText()+"',address='"+address.getText()+"',gender='"+gender+"' where id='"+Integer.parseInt(user.getText())+"'");
                p.execute();
               JOptionPane.showMessageDialog(null, "done");
               
          user.setText("");
          name.setText("");
          phone.setText("");
          address.setText("");
          male.isSelected();
          female.isSelected();
          user.setEnabled(true);
          name.setEnabled(false);
          phone.setEnabled(false);
          address.setEnabled(false);
          male.setEnabled(false);
          female.setEnabled(false);


            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
             
                 try {
                     con.close();
                      p.close();
                     res.close();
                 } catch (SQLException ex) {
                     Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
                 }
                
             }

      }
    }

    private void delete() {
             if(user.getText().equals(""))
        {
        JOptionPane.showMessageDialog(null, "There are empty fields");
      }
        else{
             try {
                con=connect();
                p=con.prepareStatement("select * from doctor where id='"+Integer.parseInt(user.getText())+"'");
                res=p.executeQuery();
                if(res.next()){
                    con=connect();
                         p=con.prepareStatement("delete from doctor where id='"+Integer.parseInt(user.getText())+"'");
                         p.execute();
                         JOptionPane.showMessageDialog(null,"doctor has been cleared" );
                         user.setText("");          
                }else{
                  JOptionPane.showMessageDialog(null,"رقم الدكتور غير موجود" );
  
                }
                

            } catch (SQLException ex) {
                Logger.getLogger(cours.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
             
                 try {
                     con.close();
                      p.close();
                     res.close();
                 } catch (SQLException ex) {
                     Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
                 }
                
             }
             
        }
    }
}

